// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations: one to many
  posts Post[]
  comments Comment[]
  likes Like[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  notifications Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")
}

model Post{
  id String @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes Like[]
  notifications Notification[]
}

model Comment {
  id String @id @default(cuid())
  postId String
  authorId String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  notifications Notification[]
  
  @@index([authorId,postId])  //composite index for author and post for faster queries

}

model Like {
  id String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now())

  //relations
  user User @relation(fields:[userId],references: [id],onDelete: Cascade)
  post Post @relation(fields:[postId],references: [id],onDelete: Cascade)

  @@index([userId,postId]) //composite index for user and post for faster queries
  @@unique([userId,postId]) //same user cannot like the same post multiple times
}

model Follows {
  followerId String
  followingId String
  createdAt DateTime @default(now())

  //Relations
  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId]) //faster query
  @@id([followerId,followingId]) //prevent duplicate query
}

model Notification {
  id String @id @default(cuid())
  userId String
  creatorId String
  type NotificationType // e.g. "like", "comment", "follow"
  read Boolean @default(false)
  postId String?
  commentId String?
  createdAt DateTime @default(now())

  //Relations
  user User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId,createdAt]) //faster query for notifications
}

enum NotificationType {
  LIKE
  COMMENT 
  FOLLOW
}